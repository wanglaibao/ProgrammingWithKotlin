一:有关SpringBootKotlinDemoApplication类启动的说明
    1:  将main函数和SpringBootKotlinDemoApplication位于同一个包下
        @SpringBootApplication
        class SpringBootKotlinDemoApplication {}

        fun main(args: Array<String>) {
            SpringApplication.run(SpringBootKotlinDemoApplication::class.java,*args)
        }

    这种方式通过 命令行方式启动 可以运行和访问【但是无法Debug应用程序,不好用】

    通过IDE tools来启动呢?  【Game Over】

        Exception in thread "main" java.lang.NoSuchMethodException: com.laibao.microservice.SpringBootKotlinDemoApplication.main([Ljava.lang.String;)
        	at java.lang.Class.getMethod(Class.java:1786)
        	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:126)

     how to resove this problem!
     how to resove this problem!
     how to resove this problem!

    2:将main函数放到SpringBootKotlinDemoApplication类的内部【可以么???】
            NG

            采用命令行方式来运行
             [ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.5.7.RELEASE:run (default-cli) on project kotlin-microservice-demo: Unable to find a suita
             ble main class, please add a 'mainClass' property -> [Help 1]
             [ERROR]
             [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
             [ERROR] Re-run Maven using the -X switch to enable full debug logging.

            采用IDE方式来运行

            main method should be static

            Process finished with exit code 0

    3: 利用SpringBootKotlinDemoApplication类的伴身对象【accompany object】
            命令行方式来运行【OK】

            IDE方式来运行 【OK】

            IDE DEBUG方式来运行 【OK】

            conculde: this is the best way to bootstrap the application!

二: 对依赖注入实现方式的探讨

    1：通过主构造函数来进行

    2：通过延迟初始化来进行

    3：二者结合起来进行